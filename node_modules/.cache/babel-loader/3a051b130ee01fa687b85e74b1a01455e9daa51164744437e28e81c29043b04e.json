{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mpilonhle\\\\my-blog-demo\\\\src\\\\components\\\\BlogList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BlogList = () => {\n  _s();\n  const [blogs, setBlogs] = useState([]);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchBlogs = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:5000/api/blogs\");\n        setBlogs(response.data);\n      } catch (err) {\n        console.error(\"Error fetching blogs\", err);\n        setError(\"Error fetching blogs\");\n      }\n    };\n    fetchBlogs();\n  }, []);\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: blogs.length > 0 ? blogs.map(blog => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: blog.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: blog.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: blog.image,\n        alt: blog.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Author: \", blog.author]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this)]\n    }, blog._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No blogs available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n/*\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport PostCard from \"./PostCard\"; // Import PostCard component\r\n\r\nconst BlogList = () => {\r\n  const [blogs, setBlogs] = useState([]);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const fetchBlogs = async () => {\r\n      try {\r\n        const response = await axios.get(\"http://localhost:5000/api/blogs\");\r\n        setBlogs(response.data);\r\n      } catch (err) {\r\n        setError(\"Error fetching blogs\");\r\n      }\r\n    };\r\n\r\n    fetchBlogs();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"blog-list\">\r\n      <h2>Blog Posts</h2>\r\n      {error && <p>{error}</p>}\r\n      <div className=\"blog-cards\">\r\n        {blogs.length > 0 ? (\r\n          blogs.map((blog) => (\r\n            <PostCard\r\n              key={blog._id}\r\n              title={blog.title}\r\n              author={blog.author}\r\n              date={blog.createdAt}\r\n              description={blog.content}\r\n              image={blog.image}\r\n              tags={blog.tags} // Assuming tags are available\r\n              site={{ url: `/blogs/${blog._id}` }} // Assuming you want to link to a blog details page\r\n            />\r\n          ))\r\n        ) : (\r\n          <p>No blogs available</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n*/\n/*\r\n  return (\r\n    <div className=\"blog-list\">\r\n      {blogPosts.map((post, index) => (\r\n        <PostCard\r\n          key={index}\r\n          title={post.title}\r\n          author={post.author}\r\n          date={post.createdAt} // Assuming `createdAt` is in your MongoDB schema\r\n          description={post.content} // Assuming `content` is the field for blog content\r\n          image={post.imageUrl} // Assuming `imageUrl` is where you store image links\r\n          tags={post.tags || []} // Assuming `tags` is an array\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n*/\n/*\r\nconst BlogList = () => {\r\n  const [blogPosts, setBlogPosts] = useState([]); // State to store API data\r\n  const [loading, setLoading] = useState(true); // State to show loading indicator\r\n  const [error, setError] = useState(null); // State to handle errors\r\n\r\n  // Fetch data from the API when the component mounts\r\n  useEffect(() => {\r\n    const fetchBlogPosts = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          \"https://newsapi.org/v2/top-headlines?sources=techcrunch&apiKey=972a58c0da734c67983f569f30bc4177\"\r\n        ); // Replace with your API URL\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch blog posts\");\r\n        }\r\n        const data = await response.json();\r\n        console.log(data.articles); // Log the articles to see what's inside\r\n        setBlogPosts(data.articles); // Make sure to access the 'articles' array\r\n      } catch (error) {\r\n        setError(error.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchBlogPosts();\r\n  }, []); // Empty dependency array to fetch data only once\r\n\r\n  if (loading) return <div>Loading...</div>; // Show loading message while fetching data\r\n  if (error) return <div>Error: {error}</div>; // Show error message if there's an error\r\n\r\n  return (\r\n    <div className=\"blog-list\">\r\n      {blogPosts.map((post, index) => (\r\n        <PostCard\r\n          key={index}\r\n          title={post.title}\r\n          author={post.author}\r\n          date={post.publishedAt} // 'publishedAt' is the date field in your API\r\n          description={post.description}\r\n          image={post.urlToImage} // 'urlToImage' for the image field\r\n          tags={post.tags || []} // Pass empty array if no tags\r\n          site={post.url}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n*/\n/*\r\nconst BlogList = () => {\r\n  const [blogPosts, setBlogPosts] = useState([]); // State to store API data\r\n  const [loading, setLoading] = useState(true); // State to show loading indicator\r\n  const [error, setError] = useState(null); // State to handle errors\r\n\r\n  // Fetch data from the API when the component mounts\r\n  useEffect(() => {\r\n    const fetchBlogPosts = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          \"https://newsapi.org/v2/top-headlines?country=za&category=technology&apiKey=972a58c0da734c67983f569f30bc4177\"\r\n        ); // Replace with your API URL\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch blog posts\");\r\n        }\r\n        const data = await response.json();\r\n        setBlogPosts(data.articles); // Make sure to access the 'articles' array\r\n      } catch (error) {\r\n        setError(error.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchBlogPosts();\r\n  }, []); // Empty dependency array to fetch data only once\r\n\r\n  if (loading) return <div>Loading...</div>; // Show loading message while fetching data\r\n  if (error) return <div>Error: {error}</div>; // Show error message if there's an error\r\n\r\n  return (\r\n    <div className=\"blog-list\">\r\n      {blogPosts.map((post, index) => (\r\n        <PostCard\r\n          key={index}\r\n          title={post.title}\r\n          author={post.author}\r\n          date={post.publishedAt} // 'publishedAt' is the date field in your API\r\n          description={post.description}\r\n          image={post.urlToImage} // 'urlToImage' for the image field\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n*/\n_s(BlogList, \"HwLKShFMp+eoMZpLYWTM+wtnYvk=\");\n_c = BlogList;\nexport default BlogList;\nvar _c;\n$RefreshReg$(_c, \"BlogList\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","BlogList","_s","blogs","setBlogs","error","setError","fetchBlogs","response","get","data","err","console","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","blog","title","content","src","image","alt","author","_id","_c","$RefreshReg$"],"sources":["C:/Users/Mpilonhle/my-blog-demo/src/components/BlogList.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst BlogList = () => {\r\n  const [blogs, setBlogs] = useState([]);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchBlogs = async () => {\r\n      try {\r\n        const response = await axios.get(\"http://localhost:5000/api/blogs\");\r\n        setBlogs(response.data);\r\n      } catch (err) {\r\n        console.error(\"Error fetching blogs\", err);\r\n        setError(\"Error fetching blogs\");\r\n      }\r\n    };\r\n    fetchBlogs();\r\n  }, []);\r\n\r\n  if (error) {\r\n    return <p>{error}</p>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {blogs.length > 0 ? (\r\n        blogs.map((blog) => (\r\n          <div key={blog._id}>\r\n            <h2>{blog.title}</h2>\r\n            <p>{blog.content}</p>\r\n            <img src={blog.image} alt={blog.title} />\r\n            <p>Author: {blog.author}</p>\r\n          </div>\r\n        ))\r\n      ) : (\r\n        <p>No blogs available</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n/*\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport PostCard from \"./PostCard\"; // Import PostCard component\r\n\r\nconst BlogList = () => {\r\n  const [blogs, setBlogs] = useState([]);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const fetchBlogs = async () => {\r\n      try {\r\n        const response = await axios.get(\"http://localhost:5000/api/blogs\");\r\n        setBlogs(response.data);\r\n      } catch (err) {\r\n        setError(\"Error fetching blogs\");\r\n      }\r\n    };\r\n\r\n    fetchBlogs();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"blog-list\">\r\n      <h2>Blog Posts</h2>\r\n      {error && <p>{error}</p>}\r\n      <div className=\"blog-cards\">\r\n        {blogs.length > 0 ? (\r\n          blogs.map((blog) => (\r\n            <PostCard\r\n              key={blog._id}\r\n              title={blog.title}\r\n              author={blog.author}\r\n              date={blog.createdAt}\r\n              description={blog.content}\r\n              image={blog.image}\r\n              tags={blog.tags} // Assuming tags are available\r\n              site={{ url: `/blogs/${blog._id}` }} // Assuming you want to link to a blog details page\r\n            />\r\n          ))\r\n        ) : (\r\n          <p>No blogs available</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n*/\r\n/*\r\n  return (\r\n    <div className=\"blog-list\">\r\n      {blogPosts.map((post, index) => (\r\n        <PostCard\r\n          key={index}\r\n          title={post.title}\r\n          author={post.author}\r\n          date={post.createdAt} // Assuming `createdAt` is in your MongoDB schema\r\n          description={post.content} // Assuming `content` is the field for blog content\r\n          image={post.imageUrl} // Assuming `imageUrl` is where you store image links\r\n          tags={post.tags || []} // Assuming `tags` is an array\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n*/\r\n/*\r\nconst BlogList = () => {\r\n  const [blogPosts, setBlogPosts] = useState([]); // State to store API data\r\n  const [loading, setLoading] = useState(true); // State to show loading indicator\r\n  const [error, setError] = useState(null); // State to handle errors\r\n\r\n  // Fetch data from the API when the component mounts\r\n  useEffect(() => {\r\n    const fetchBlogPosts = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          \"https://newsapi.org/v2/top-headlines?sources=techcrunch&apiKey=972a58c0da734c67983f569f30bc4177\"\r\n        ); // Replace with your API URL\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch blog posts\");\r\n        }\r\n        const data = await response.json();\r\n        console.log(data.articles); // Log the articles to see what's inside\r\n        setBlogPosts(data.articles); // Make sure to access the 'articles' array\r\n      } catch (error) {\r\n        setError(error.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchBlogPosts();\r\n  }, []); // Empty dependency array to fetch data only once\r\n\r\n  if (loading) return <div>Loading...</div>; // Show loading message while fetching data\r\n  if (error) return <div>Error: {error}</div>; // Show error message if there's an error\r\n\r\n  return (\r\n    <div className=\"blog-list\">\r\n      {blogPosts.map((post, index) => (\r\n        <PostCard\r\n          key={index}\r\n          title={post.title}\r\n          author={post.author}\r\n          date={post.publishedAt} // 'publishedAt' is the date field in your API\r\n          description={post.description}\r\n          image={post.urlToImage} // 'urlToImage' for the image field\r\n          tags={post.tags || []} // Pass empty array if no tags\r\n          site={post.url}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n*/\r\n/*\r\nconst BlogList = () => {\r\n  const [blogPosts, setBlogPosts] = useState([]); // State to store API data\r\n  const [loading, setLoading] = useState(true); // State to show loading indicator\r\n  const [error, setError] = useState(null); // State to handle errors\r\n\r\n  // Fetch data from the API when the component mounts\r\n  useEffect(() => {\r\n    const fetchBlogPosts = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          \"https://newsapi.org/v2/top-headlines?country=za&category=technology&apiKey=972a58c0da734c67983f569f30bc4177\"\r\n        ); // Replace with your API URL\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch blog posts\");\r\n        }\r\n        const data = await response.json();\r\n        setBlogPosts(data.articles); // Make sure to access the 'articles' array\r\n      } catch (error) {\r\n        setError(error.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchBlogPosts();\r\n  }, []); // Empty dependency array to fetch data only once\r\n\r\n  if (loading) return <div>Loading...</div>; // Show loading message while fetching data\r\n  if (error) return <div>Error: {error}</div>; // Show error message if there's an error\r\n\r\n  return (\r\n    <div className=\"blog-list\">\r\n      {blogPosts.map((post, index) => (\r\n        <PostCard\r\n          key={index}\r\n          title={post.title}\r\n          author={post.author}\r\n          date={post.publishedAt} // 'publishedAt' is the date field in your API\r\n          description={post.description}\r\n          image={post.urlToImage} // 'urlToImage' for the image field\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n*/\r\nexport default BlogList;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMU,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAC,iCAAiC,CAAC;QACnEL,QAAQ,CAACI,QAAQ,CAACE,IAAI,CAAC;MACzB,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZC,OAAO,CAACP,KAAK,CAAC,sBAAsB,EAAEM,GAAG,CAAC;QAC1CL,QAAQ,CAAC,sBAAsB,CAAC;MAClC;IACF,CAAC;IACDC,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIF,KAAK,EAAE;IACT,oBAAOL,OAAA;MAAAa,QAAA,EAAIR;IAAK;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EACvB;EAEA,oBACEjB,OAAA;IAAAa,QAAA,EACGV,KAAK,CAACe,MAAM,GAAG,CAAC,GACff,KAAK,CAACgB,GAAG,CAAEC,IAAI,iBACbpB,OAAA;MAAAa,QAAA,gBACEb,OAAA;QAAAa,QAAA,EAAKO,IAAI,CAACC;MAAK;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACrBjB,OAAA;QAAAa,QAAA,EAAIO,IAAI,CAACE;MAAO;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrBjB,OAAA;QAAKuB,GAAG,EAAEH,IAAI,CAACI,KAAM;QAACC,GAAG,EAAEL,IAAI,CAACC;MAAM;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACzCjB,OAAA;QAAAa,QAAA,GAAG,UAAQ,EAACO,IAAI,CAACM,MAAM;MAAA;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA,GAJpBG,IAAI,CAACO,GAAG;MAAAb,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAKb,CACN,CAAC,gBAEFjB,OAAA;MAAAa,QAAA,EAAG;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EACzB;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9CAf,EAAA,CA3JMD,QAAQ;AAAA2B,EAAA,GAAR3B,QAAQ;AA0Md,eAAeA,QAAQ;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}