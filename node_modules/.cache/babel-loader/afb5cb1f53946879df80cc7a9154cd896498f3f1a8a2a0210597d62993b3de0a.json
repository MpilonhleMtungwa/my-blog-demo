{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mpilonhle\\\\my-blog-demo\\\\src\\\\components\\\\BlogList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport PostCard from \"./PostCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BlogList = () => {\n  _s();\n  const [blogPosts, setBlogPosts] = useState([]); // State to store API data\n  const [loading, setLoading] = useState(true); // State to show loading indicator\n  const [error, setError] = useState(null); // State to handle errors\n\n  // Fetch data from the API when the component mounts\n  useEffect(() => {\n    const fetchBlogPosts = async () => {\n      try {\n        const response = await fetch(\"https://newsapi.org/v2/top-headlines?country=us&apiKey=972a58c0da734c67983f569f30bc4177\"); // Replace with your API URL\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch blog posts\");\n        }\n        const data = await response.json();\n        console.log(data.articles); // Log the articles to see what's inside\n        setBlogPosts(data.articles); // Make sure to access the 'articles' array\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchBlogPosts();\n  }, []); // Empty dependency array to fetch data only once\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 23\n  }, this); // Show loading message while fetching data\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 21\n  }, this); // Show error message if there's an error\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"blog-list\",\n    children: blogPosts.map((post, index) => /*#__PURE__*/_jsxDEV(PostCard, {\n      title: post.title,\n      author: post.author,\n      date: post.publishedAt // 'publishedAt' is the date field in your API\n      ,\n      description: post.description,\n      image: post.urlToImage // 'urlToImage' for the image field\n      ,\n      tags: post.tags || [] // Pass empty array if no tags\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n/*\r\nconst BlogList = () => {\r\n  const [blogPosts, setBlogPosts] = useState([]); // State to store API data\r\n  const [loading, setLoading] = useState(true); // State to show loading indicator\r\n  const [error, setError] = useState(null); // State to handle errors\r\n\r\n  // Fetch data from the API when the component mounts\r\n  useEffect(() => {\r\n    const fetchBlogPosts = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          \"https://newsapi.org/v2/top-headlines?country=za&category=technology&apiKey=972a58c0da734c67983f569f30bc4177\"\r\n        ); // Replace with your API URL\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch blog posts\");\r\n        }\r\n        const data = await response.json();\r\n        setBlogPosts(data.articles); // Make sure to access the 'articles' array\r\n      } catch (error) {\r\n        setError(error.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchBlogPosts();\r\n  }, []); // Empty dependency array to fetch data only once\r\n\r\n  if (loading) return <div>Loading...</div>; // Show loading message while fetching data\r\n  if (error) return <div>Error: {error}</div>; // Show error message if there's an error\r\n\r\n  return (\r\n    <div className=\"blog-list\">\r\n      {blogPosts.map((post, index) => (\r\n        <PostCard\r\n          key={index}\r\n          title={post.title}\r\n          author={post.author}\r\n          date={post.publishedAt} // 'publishedAt' is the date field in your API\r\n          description={post.description}\r\n          image={post.urlToImage} // 'urlToImage' for the image field\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n*/\n_s(BlogList, \"k4UwTUA5JKf/XrteltOtVb6Xk6E=\");\n_c = BlogList;\nexport default BlogList;\nvar _c;\n$RefreshReg$(_c, \"BlogList\");","map":{"version":3,"names":["React","useEffect","useState","PostCard","jsxDEV","_jsxDEV","BlogList","_s","blogPosts","setBlogPosts","loading","setLoading","error","setError","fetchBlogPosts","response","fetch","ok","Error","data","json","console","log","articles","message","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","post","index","title","author","date","publishedAt","description","image","urlToImage","tags","_c","$RefreshReg$"],"sources":["C:/Users/Mpilonhle/my-blog-demo/src/components/BlogList.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport PostCard from \"./PostCard\";\r\n\r\nconst BlogList = () => {\r\n  const [blogPosts, setBlogPosts] = useState([]); // State to store API data\r\n  const [loading, setLoading] = useState(true); // State to show loading indicator\r\n  const [error, setError] = useState(null); // State to handle errors\r\n\r\n  // Fetch data from the API when the component mounts\r\n  useEffect(() => {\r\n    const fetchBlogPosts = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          \"https://newsapi.org/v2/top-headlines?country=us&apiKey=972a58c0da734c67983f569f30bc4177\"\r\n        ); // Replace with your API URL\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch blog posts\");\r\n        }\r\n        const data = await response.json();\r\n        console.log(data.articles); // Log the articles to see what's inside\r\n        setBlogPosts(data.articles); // Make sure to access the 'articles' array\r\n      } catch (error) {\r\n        setError(error.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchBlogPosts();\r\n  }, []); // Empty dependency array to fetch data only once\r\n\r\n  if (loading) return <div>Loading...</div>; // Show loading message while fetching data\r\n  if (error) return <div>Error: {error}</div>; // Show error message if there's an error\r\n\r\n  return (\r\n    <div className=\"blog-list\">\r\n      {blogPosts.map((post, index) => (\r\n        <PostCard\r\n          key={index}\r\n          title={post.title}\r\n          author={post.author}\r\n          date={post.publishedAt} // 'publishedAt' is the date field in your API\r\n          description={post.description}\r\n          image={post.urlToImage} // 'urlToImage' for the image field\r\n          tags={post.tags || []} // Pass empty array if no tags\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\n/*\r\nconst BlogList = () => {\r\n  const [blogPosts, setBlogPosts] = useState([]); // State to store API data\r\n  const [loading, setLoading] = useState(true); // State to show loading indicator\r\n  const [error, setError] = useState(null); // State to handle errors\r\n\r\n  // Fetch data from the API when the component mounts\r\n  useEffect(() => {\r\n    const fetchBlogPosts = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          \"https://newsapi.org/v2/top-headlines?country=za&category=technology&apiKey=972a58c0da734c67983f569f30bc4177\"\r\n        ); // Replace with your API URL\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch blog posts\");\r\n        }\r\n        const data = await response.json();\r\n        setBlogPosts(data.articles); // Make sure to access the 'articles' array\r\n      } catch (error) {\r\n        setError(error.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchBlogPosts();\r\n  }, []); // Empty dependency array to fetch data only once\r\n\r\n  if (loading) return <div>Loading...</div>; // Show loading message while fetching data\r\n  if (error) return <div>Error: {error}</div>; // Show error message if there's an error\r\n\r\n  return (\r\n    <div className=\"blog-list\">\r\n      {blogPosts.map((post, index) => (\r\n        <PostCard\r\n          key={index}\r\n          title={post.title}\r\n          author={post.author}\r\n          date={post.publishedAt} // 'publishedAt' is the date field in your API\r\n          description={post.description}\r\n          image={post.urlToImage} // 'urlToImage' for the image field\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n*/\r\nexport default BlogList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}