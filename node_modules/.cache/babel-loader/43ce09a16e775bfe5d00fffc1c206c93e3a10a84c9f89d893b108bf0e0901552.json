{"ast":null,"code":"const Blog = require(\"../models/blog\");\n\n// Create new blog post\nexports.createBlog = async (req, res) => {\n  try {\n    const {\n      title,\n      content\n    } = req.body;\n    const newBlog = new Blog({\n      title,\n      content,\n      author: req.user.id // Ensure the user is authenticated\n    });\n    await newBlog.save();\n    res.json(newBlog);\n  } catch (err) {\n    res.status(500).json({\n      error: err.message\n    });\n  }\n};\n\n// Get all blog posts\nexports.getBlogs = async (req, res) => {\n  try {\n    const blogs = await Blog.find().populate(\"author\", \"name\");\n    res.json(blogs);\n  } catch (err) {\n    res.status(500).json({\n      error: err.message\n    });\n  }\n};\n\n// Get a single blog post\nexports.getBlogById = async (req, res) => {\n  try {\n    const blog = await Blog.findById(req.params.id).populate(\"author\", \"name\");\n    if (!blog) return res.status(404).json({\n      message: \"Blog not found\"\n    });\n    res.json(blog);\n  } catch (err) {\n    res.status(500).json({\n      error: err.message\n    });\n  }\n};\n\n// Update a blog post (only author or admin can update)\nexports.updateBlog = async (req, res) => {\n  try {\n    const blog = await Blog.findById(req.params.id);\n    if (!blog) return res.status(404).json({\n      message: \"Blog not found\"\n    });\n\n    // Ensure only the author or an admin can update the blog\n    if (blog.author.toString() !== req.user.id) {\n      return res.status(401).json({\n        message: \"Unauthorized\"\n      });\n    }\n    const {\n      title,\n      content\n    } = req.body;\n    blog.title = title || blog.title;\n    blog.content = content || blog.content;\n    await blog.save();\n    res.json(blog);\n  } catch (err) {\n    res.status(500).json({\n      error: err.message\n    });\n  }\n};\n\n// Delete a blog post (only author or admin can delete)\nexports.deleteBlog = async (req, res) => {\n  try {\n    const blog = await Blog.findById(req.params.id);\n    if (!blog) return res.status(404).json({\n      message: \"Blog not found\"\n    });\n\n    // Ensure only the author or an admin can delete the blog\n    if (blog.author.toString() !== req.user.id) {\n      return res.status(401).json({\n        message: \"Unauthorized\"\n      });\n    }\n    await blog.remove();\n    res.json({\n      message: \"Blog deleted successfully\"\n    });\n  } catch (err) {\n    res.status(500).json({\n      error: err.message\n    });\n  }\n};","map":{"version":3,"names":["Blog","require","exports","createBlog","req","res","title","content","body","newBlog","author","user","id","save","json","err","status","error","message","getBlogs","blogs","find","populate","getBlogById","blog","findById","params","updateBlog","toString","deleteBlog","remove"],"sources":["C:/Users/Mpilonhle/my-blog-demo/src/controllers/blogController.js"],"sourcesContent":["const Blog = require(\"../models/blog\");\r\n\r\n// Create new blog post\r\nexports.createBlog = async (req, res) => {\r\n  try {\r\n    const { title, content } = req.body;\r\n    const newBlog = new Blog({\r\n      title,\r\n      content,\r\n      author: req.user.id, // Ensure the user is authenticated\r\n    });\r\n    await newBlog.save();\r\n    res.json(newBlog);\r\n  } catch (err) {\r\n    res.status(500).json({ error: err.message });\r\n  }\r\n};\r\n\r\n// Get all blog posts\r\nexports.getBlogs = async (req, res) => {\r\n  try {\r\n    const blogs = await Blog.find().populate(\"author\", \"name\");\r\n    res.json(blogs);\r\n  } catch (err) {\r\n    res.status(500).json({ error: err.message });\r\n  }\r\n};\r\n\r\n// Get a single blog post\r\nexports.getBlogById = async (req, res) => {\r\n  try {\r\n    const blog = await Blog.findById(req.params.id).populate(\"author\", \"name\");\r\n    if (!blog) return res.status(404).json({ message: \"Blog not found\" });\r\n    res.json(blog);\r\n  } catch (err) {\r\n    res.status(500).json({ error: err.message });\r\n  }\r\n};\r\n\r\n// Update a blog post (only author or admin can update)\r\nexports.updateBlog = async (req, res) => {\r\n  try {\r\n    const blog = await Blog.findById(req.params.id);\r\n    if (!blog) return res.status(404).json({ message: \"Blog not found\" });\r\n\r\n    // Ensure only the author or an admin can update the blog\r\n    if (blog.author.toString() !== req.user.id) {\r\n      return res.status(401).json({ message: \"Unauthorized\" });\r\n    }\r\n\r\n    const { title, content } = req.body;\r\n    blog.title = title || blog.title;\r\n    blog.content = content || blog.content;\r\n    await blog.save();\r\n\r\n    res.json(blog);\r\n  } catch (err) {\r\n    res.status(500).json({ error: err.message });\r\n  }\r\n};\r\n\r\n// Delete a blog post (only author or admin can delete)\r\nexports.deleteBlog = async (req, res) => {\r\n  try {\r\n    const blog = await Blog.findById(req.params.id);\r\n    if (!blog) return res.status(404).json({ message: \"Blog not found\" });\r\n\r\n    // Ensure only the author or an admin can delete the blog\r\n    if (blog.author.toString() !== req.user.id) {\r\n      return res.status(401).json({ message: \"Unauthorized\" });\r\n    }\r\n\r\n    await blog.remove();\r\n    res.json({ message: \"Blog deleted successfully\" });\r\n  } catch (err) {\r\n    res.status(500).json({ error: err.message });\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}