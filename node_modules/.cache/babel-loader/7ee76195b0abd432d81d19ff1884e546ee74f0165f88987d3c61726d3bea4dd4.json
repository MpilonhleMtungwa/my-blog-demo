{"ast":null,"code":"const express = require(\"express\");\nconst router = express.Router();\nconst bcrypt = require(\"bcrypt\");\nconst jwt = require(\"jsonwebtoken\");\nconst User = require(\"../models/user\");\n\n// Register route\nrouter.post(\"/register\", async (req, res) => {\n  try {\n    const {\n      username,\n      email,\n      password\n    } = req.body;\n    const user = new User({\n      username,\n      email,\n      password\n    });\n    await user.save();\n    res.status(201).json({\n      message: \"User created successfully!\"\n    });\n  } catch (error) {\n    res.status(500).json({\n      message: \"Registration failed\"\n    });\n  }\n});\n\n// Login Route\nrouter.post(\"/login\", async (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n  try {\n    const user = await User.findOne({\n      email\n    });\n    if (!user) {\n      return res.status(404).json({\n        message: \"User not found\"\n      });\n    }\n    const isPasswordValid = await bcrypt.compare(password, user.password);\n    if (!isPasswordValid) {\n      return res.status(400).json({\n        message: \"Invalid credentials\"\n      });\n    }\n    const token = jwt.sign({\n      id: user._id,\n      username: user.username\n    }, process.env.JWT_SECRET, {\n      expiresIn: \"1h\"\n    });\n    res.status(200).json({\n      token,\n      message: \"Login successful\"\n    });\n  } catch (error) {\n    res.status(500).json({\n      message: \"Login failed\"\n    });\n  }\n});\nmodule.exports = router;\n\n/*\r\nconst express = require(\"express\");\r\nconst { registerUser, loginUser } = require(\"../controllers/authController\");\r\nconst router = express.Router();\r\n\r\n// Auth routes\r\nrouter.post(\"/register\", registerUser); // Register a new user\r\nrouter.post(\"/login\", loginUser); // Login a user\r\n\r\nmodule.exports = router;\r\n*/","map":{"version":3,"names":["express","require","router","Router","bcrypt","jwt","User","post","req","res","username","email","password","body","user","save","status","json","message","error","findOne","isPasswordValid","compare","token","sign","id","_id","process","env","JWT_SECRET","expiresIn","module","exports"],"sources":["C:/Users/Mpilonhle/my-blog-demo/src/routes/authRoutes.js"],"sourcesContent":["const express = require(\"express\");\r\nconst router = express.Router();\r\nconst bcrypt = require(\"bcrypt\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst User = require(\"../models/user\");\r\n\r\n// Register route\r\nrouter.post(\"/register\", async (req, res) => {\r\n  try {\r\n    const { username, email, password } = req.body;\r\n    const user = new User({ username, email, password });\r\n    await user.save();\r\n    res.status(201).json({ message: \"User created successfully!\" });\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Registration failed\" });\r\n  }\r\n});\r\n\r\n// Login Route\r\nrouter.post(\"/login\", async (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  try {\r\n    const user = await User.findOne({ email });\r\n    if (!user) {\r\n      return res.status(404).json({ message: \"User not found\" });\r\n    }\r\n\r\n    const isPasswordValid = await bcrypt.compare(password, user.password);\r\n    if (!isPasswordValid) {\r\n      return res.status(400).json({ message: \"Invalid credentials\" });\r\n    }\r\n\r\n    const token = jwt.sign(\r\n      { id: user._id, username: user.username },\r\n      process.env.JWT_SECRET,\r\n      { expiresIn: \"1h\" }\r\n    );\r\n    res.status(200).json({ token, message: \"Login successful\" });\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Login failed\" });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n\r\n/*\r\nconst express = require(\"express\");\r\nconst { registerUser, loginUser } = require(\"../controllers/authController\");\r\nconst router = express.Router();\r\n\r\n// Auth routes\r\nrouter.post(\"/register\", registerUser); // Register a new user\r\nrouter.post(\"/login\", loginUser); // Login a user\r\n\r\nmodule.exports = router;\r\n*/\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM,GAAGF,OAAO,CAACG,MAAM,CAAC,CAAC;AAC/B,MAAMC,MAAM,GAAGH,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMI,GAAG,GAAGJ,OAAO,CAAC,cAAc,CAAC;AACnC,MAAMK,IAAI,GAAGL,OAAO,CAAC,gBAAgB,CAAC;;AAEtC;AACAC,MAAM,CAACK,IAAI,CAAC,WAAW,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAC3C,IAAI;IACF,MAAM;MAAEC,QAAQ;MAAEC,KAAK;MAAEC;IAAS,CAAC,GAAGJ,GAAG,CAACK,IAAI;IAC9C,MAAMC,IAAI,GAAG,IAAIR,IAAI,CAAC;MAAEI,QAAQ;MAAEC,KAAK;MAAEC;IAAS,CAAC,CAAC;IACpD,MAAME,IAAI,CAACC,IAAI,CAAC,CAAC;IACjBN,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAA6B,CAAC,CAAC;EACjE,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdV,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAsB,CAAC,CAAC;EAC1D;AACF,CAAC,CAAC;;AAEF;AACAhB,MAAM,CAACK,IAAI,CAAC,QAAQ,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACxC,MAAM;IAAEE,KAAK;IAAEC;EAAS,CAAC,GAAGJ,GAAG,CAACK,IAAI;EAEpC,IAAI;IACF,MAAMC,IAAI,GAAG,MAAMR,IAAI,CAACc,OAAO,CAAC;MAAET;IAAM,CAAC,CAAC;IAC1C,IAAI,CAACG,IAAI,EAAE;MACT,OAAOL,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAiB,CAAC,CAAC;IAC5D;IAEA,MAAMG,eAAe,GAAG,MAAMjB,MAAM,CAACkB,OAAO,CAACV,QAAQ,EAAEE,IAAI,CAACF,QAAQ,CAAC;IACrE,IAAI,CAACS,eAAe,EAAE;MACpB,OAAOZ,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAsB,CAAC,CAAC;IACjE;IAEA,MAAMK,KAAK,GAAGlB,GAAG,CAACmB,IAAI,CACpB;MAAEC,EAAE,EAAEX,IAAI,CAACY,GAAG;MAAEhB,QAAQ,EAAEI,IAAI,CAACJ;IAAS,CAAC,EACzCiB,OAAO,CAACC,GAAG,CAACC,UAAU,EACtB;MAAEC,SAAS,EAAE;IAAK,CACpB,CAAC;IACDrB,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEM,KAAK;MAAEL,OAAO,EAAE;IAAmB,CAAC,CAAC;EAC9D,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdV,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAe,CAAC,CAAC;EACnD;AACF,CAAC,CAAC;AAEFa,MAAM,CAACC,OAAO,GAAG9B,MAAM;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}