{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mpilonhle\\\\my-blog-demo\\\\src\\\\components\\\\BlogList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport PostCard from \"./PostCard\"; // Import PostCard component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BlogList = () => {\n  _s();\n  const [blogs, setBlogs] = useState([]);\n  const [error, setError] = useState(\"\");\n  useEffect(() => {\n    const fetchBlogs = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:5000/routes/blogs\");\n        setBlogs(response.data);\n      } catch (err) {\n        setError(\"Error fetching blogs\");\n      }\n    };\n    fetchBlogs();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"blog-list\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Blog Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"blog-cards\",\n      children: blogs.length > 0 ? blogs.map(blog => /*#__PURE__*/_jsxDEV(PostCard, {\n        title: blog.title,\n        author: blog.author,\n        date: blog.createdAt,\n        description: blog.content,\n        image: blog.image,\n        tags: blog.tags // Assuming tags are available\n        ,\n        site: {\n          url: `/blogs/${blog._id}`\n        } // Assuming you want to link to a blog details page\n      }, blog._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No blogs available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n\n/*\r\n  return (\r\n    <div className=\"blog-list\">\r\n      {blogPosts.map((post, index) => (\r\n        <PostCard\r\n          key={index}\r\n          title={post.title}\r\n          author={post.author}\r\n          date={post.createdAt} // Assuming `createdAt` is in your MongoDB schema\r\n          description={post.content} // Assuming `content` is the field for blog content\r\n          image={post.imageUrl} // Assuming `imageUrl` is where you store image links\r\n          tags={post.tags || []} // Assuming `tags` is an array\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n*/\n/*\r\nconst BlogList = () => {\r\n  const [blogPosts, setBlogPosts] = useState([]); // State to store API data\r\n  const [loading, setLoading] = useState(true); // State to show loading indicator\r\n  const [error, setError] = useState(null); // State to handle errors\r\n\r\n  // Fetch data from the API when the component mounts\r\n  useEffect(() => {\r\n    const fetchBlogPosts = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          \"https://newsapi.org/v2/top-headlines?sources=techcrunch&apiKey=972a58c0da734c67983f569f30bc4177\"\r\n        ); // Replace with your API URL\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch blog posts\");\r\n        }\r\n        const data = await response.json();\r\n        console.log(data.articles); // Log the articles to see what's inside\r\n        setBlogPosts(data.articles); // Make sure to access the 'articles' array\r\n      } catch (error) {\r\n        setError(error.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchBlogPosts();\r\n  }, []); // Empty dependency array to fetch data only once\r\n\r\n  if (loading) return <div>Loading...</div>; // Show loading message while fetching data\r\n  if (error) return <div>Error: {error}</div>; // Show error message if there's an error\r\n\r\n  return (\r\n    <div className=\"blog-list\">\r\n      {blogPosts.map((post, index) => (\r\n        <PostCard\r\n          key={index}\r\n          title={post.title}\r\n          author={post.author}\r\n          date={post.publishedAt} // 'publishedAt' is the date field in your API\r\n          description={post.description}\r\n          image={post.urlToImage} // 'urlToImage' for the image field\r\n          tags={post.tags || []} // Pass empty array if no tags\r\n          site={post.url}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n*/\n/*\r\nconst BlogList = () => {\r\n  const [blogPosts, setBlogPosts] = useState([]); // State to store API data\r\n  const [loading, setLoading] = useState(true); // State to show loading indicator\r\n  const [error, setError] = useState(null); // State to handle errors\r\n\r\n  // Fetch data from the API when the component mounts\r\n  useEffect(() => {\r\n    const fetchBlogPosts = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          \"https://newsapi.org/v2/top-headlines?country=za&category=technology&apiKey=972a58c0da734c67983f569f30bc4177\"\r\n        ); // Replace with your API URL\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch blog posts\");\r\n        }\r\n        const data = await response.json();\r\n        setBlogPosts(data.articles); // Make sure to access the 'articles' array\r\n      } catch (error) {\r\n        setError(error.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchBlogPosts();\r\n  }, []); // Empty dependency array to fetch data only once\r\n\r\n  if (loading) return <div>Loading...</div>; // Show loading message while fetching data\r\n  if (error) return <div>Error: {error}</div>; // Show error message if there's an error\r\n\r\n  return (\r\n    <div className=\"blog-list\">\r\n      {blogPosts.map((post, index) => (\r\n        <PostCard\r\n          key={index}\r\n          title={post.title}\r\n          author={post.author}\r\n          date={post.publishedAt} // 'publishedAt' is the date field in your API\r\n          description={post.description}\r\n          image={post.urlToImage} // 'urlToImage' for the image field\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n*/\n_s(BlogList, \"JrBiPJd14L2bBvfEvcF+sa2q70Q=\");\n_c = BlogList;\nexport default BlogList;\nvar _c;\n$RefreshReg$(_c, \"BlogList\");","map":{"version":3,"names":["React","useState","useEffect","axios","PostCard","jsxDEV","_jsxDEV","BlogList","_s","blogs","setBlogs","error","setError","fetchBlogs","response","get","data","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","blog","title","author","date","createdAt","description","content","image","tags","site","url","_id","_c","$RefreshReg$"],"sources":["C:/Users/Mpilonhle/my-blog-demo/src/components/BlogList.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport PostCard from \"./PostCard\"; // Import PostCard component\r\n\r\nconst BlogList = () => {\r\n  const [blogs, setBlogs] = useState([]);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const fetchBlogs = async () => {\r\n      try {\r\n        const response = await axios.get(\"http://localhost:5000/routes/blogs\");\r\n        setBlogs(response.data);\r\n      } catch (err) {\r\n        setError(\"Error fetching blogs\");\r\n      }\r\n    };\r\n\r\n    fetchBlogs();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"blog-list\">\r\n      <h2>Blog Posts</h2>\r\n      {error && <p>{error}</p>}\r\n      <div className=\"blog-cards\">\r\n        {blogs.length > 0 ? (\r\n          blogs.map((blog) => (\r\n            <PostCard\r\n              key={blog._id}\r\n              title={blog.title}\r\n              author={blog.author}\r\n              date={blog.createdAt}\r\n              description={blog.content}\r\n              image={blog.image}\r\n              tags={blog.tags} // Assuming tags are available\r\n              site={{ url: `/blogs/${blog._id}` }} // Assuming you want to link to a blog details page\r\n            />\r\n          ))\r\n        ) : (\r\n          <p>No blogs available</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n/*\r\n  return (\r\n    <div className=\"blog-list\">\r\n      {blogPosts.map((post, index) => (\r\n        <PostCard\r\n          key={index}\r\n          title={post.title}\r\n          author={post.author}\r\n          date={post.createdAt} // Assuming `createdAt` is in your MongoDB schema\r\n          description={post.content} // Assuming `content` is the field for blog content\r\n          image={post.imageUrl} // Assuming `imageUrl` is where you store image links\r\n          tags={post.tags || []} // Assuming `tags` is an array\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n*/\r\n/*\r\nconst BlogList = () => {\r\n  const [blogPosts, setBlogPosts] = useState([]); // State to store API data\r\n  const [loading, setLoading] = useState(true); // State to show loading indicator\r\n  const [error, setError] = useState(null); // State to handle errors\r\n\r\n  // Fetch data from the API when the component mounts\r\n  useEffect(() => {\r\n    const fetchBlogPosts = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          \"https://newsapi.org/v2/top-headlines?sources=techcrunch&apiKey=972a58c0da734c67983f569f30bc4177\"\r\n        ); // Replace with your API URL\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch blog posts\");\r\n        }\r\n        const data = await response.json();\r\n        console.log(data.articles); // Log the articles to see what's inside\r\n        setBlogPosts(data.articles); // Make sure to access the 'articles' array\r\n      } catch (error) {\r\n        setError(error.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchBlogPosts();\r\n  }, []); // Empty dependency array to fetch data only once\r\n\r\n  if (loading) return <div>Loading...</div>; // Show loading message while fetching data\r\n  if (error) return <div>Error: {error}</div>; // Show error message if there's an error\r\n\r\n  return (\r\n    <div className=\"blog-list\">\r\n      {blogPosts.map((post, index) => (\r\n        <PostCard\r\n          key={index}\r\n          title={post.title}\r\n          author={post.author}\r\n          date={post.publishedAt} // 'publishedAt' is the date field in your API\r\n          description={post.description}\r\n          image={post.urlToImage} // 'urlToImage' for the image field\r\n          tags={post.tags || []} // Pass empty array if no tags\r\n          site={post.url}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n*/\r\n/*\r\nconst BlogList = () => {\r\n  const [blogPosts, setBlogPosts] = useState([]); // State to store API data\r\n  const [loading, setLoading] = useState(true); // State to show loading indicator\r\n  const [error, setError] = useState(null); // State to handle errors\r\n\r\n  // Fetch data from the API when the component mounts\r\n  useEffect(() => {\r\n    const fetchBlogPosts = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          \"https://newsapi.org/v2/top-headlines?country=za&category=technology&apiKey=972a58c0da734c67983f569f30bc4177\"\r\n        ); // Replace with your API URL\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch blog posts\");\r\n        }\r\n        const data = await response.json();\r\n        setBlogPosts(data.articles); // Make sure to access the 'articles' array\r\n      } catch (error) {\r\n        setError(error.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchBlogPosts();\r\n  }, []); // Empty dependency array to fetch data only once\r\n\r\n  if (loading) return <div>Loading...</div>; // Show loading message while fetching data\r\n  if (error) return <div>Error: {error}</div>; // Show error message if there's an error\r\n\r\n  return (\r\n    <div className=\"blog-list\">\r\n      {blogPosts.map((post, index) => (\r\n        <PostCard\r\n          key={index}\r\n          title={post.title}\r\n          author={post.author}\r\n          date={post.publishedAt} // 'publishedAt' is the date field in your API\r\n          description={post.description}\r\n          image={post.urlToImage} // 'urlToImage' for the image field\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n*/\r\nexport default BlogList;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,YAAY,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd,MAAMW,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,GAAG,CAAC,oCAAoC,CAAC;QACtEL,QAAQ,CAACI,QAAQ,CAACE,IAAI,CAAC;MACzB,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZL,QAAQ,CAAC,sBAAsB,CAAC;MAClC;IACF,CAAC;IAEDC,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEP,OAAA;IAAKY,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBb,OAAA;MAAAa,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAClBZ,KAAK,iBAAIL,OAAA;MAAAa,QAAA,EAAIR;IAAK;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxBjB,OAAA;MAAKY,SAAS,EAAC,YAAY;MAAAC,QAAA,EACxBV,KAAK,CAACe,MAAM,GAAG,CAAC,GACff,KAAK,CAACgB,GAAG,CAAEC,IAAI,iBACbpB,OAAA,CAACF,QAAQ;QAEPuB,KAAK,EAAED,IAAI,CAACC,KAAM;QAClBC,MAAM,EAAEF,IAAI,CAACE,MAAO;QACpBC,IAAI,EAAEH,IAAI,CAACI,SAAU;QACrBC,WAAW,EAAEL,IAAI,CAACM,OAAQ;QAC1BC,KAAK,EAAEP,IAAI,CAACO,KAAM;QAClBC,IAAI,EAAER,IAAI,CAACQ,IAAK,CAAC;QAAA;QACjBC,IAAI,EAAE;UAAEC,GAAG,EAAE,UAAUV,IAAI,CAACW,GAAG;QAAG,CAAE,CAAC;MAAA,GAPhCX,IAAI,CAACW,GAAG;QAAAjB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAQd,CACF,CAAC,gBAEFjB,OAAA;QAAAa,QAAA,EAAG;MAAkB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IACzB;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9CAf,EAAA,CA/GMD,QAAQ;AAAA+B,EAAA,GAAR/B,QAAQ;AA8Jd,eAAeA,QAAQ;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}