{"ast":null,"code":"const User = require(\"../models/user\");\nconst bcrypt = require(\"bcryptjs\");\nconst jwt = require(\"jsonwebtoken\");\n\n// Register new user\nexports.registerUser = async (req, res) => {\n  const {\n    name,\n    email,\n    password\n  } = req.body;\n  try {\n    let user = await User.findOne({\n      email\n    });\n    if (user) return res.status(400).json({\n      message: \"User already exists\"\n    });\n    user = new User({\n      name,\n      email,\n      password: await bcrypt.hash(password, 10)\n    });\n    await user.save();\n    const token = jwt.sign({\n      id: user.id\n    }, process.env.JWT_SECRET, {\n      expiresIn: \"1h\"\n    });\n    res.json({\n      token,\n      user: {\n        id: user.id,\n        name: user.name,\n        email: user.email\n      }\n    });\n  } catch (err) {\n    res.status(500).json({\n      error: err.message\n    });\n  }\n};\n\n// Login user\nexports.loginUser = async (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n  try {\n    const user = await User.findOne({\n      email\n    });\n    if (!user) return res.status(400).json({\n      message: \"User not found\"\n    });\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) return res.status(400).json({\n      message: \"Invalid credentials\"\n    });\n    const token = jwt.sign({\n      id: user.id\n    }, process.env.JWT_SECRET, {\n      expiresIn: \"1h\"\n    });\n    res.json({\n      token,\n      user: {\n        id: user.id,\n        name: user.name,\n        email: user.email\n      }\n    });\n  } catch (err) {\n    res.status(500).json({\n      error: err.message\n    });\n  }\n};","map":{"version":3,"names":["User","require","bcrypt","jwt","exports","registerUser","req","res","name","email","password","body","user","findOne","status","json","message","hash","save","token","sign","id","process","env","JWT_SECRET","expiresIn","err","error","loginUser","isMatch","compare"],"sources":["C:/Users/Mpilonhle/my-blog-demo/src/controllers/authController.js"],"sourcesContent":["const User = require(\"../models/user\");\r\nconst bcrypt = require(\"bcryptjs\");\r\nconst jwt = require(\"jsonwebtoken\");\r\n\r\n// Register new user\r\nexports.registerUser = async (req, res) => {\r\n  const { name, email, password } = req.body;\r\n\r\n  try {\r\n    let user = await User.findOne({ email });\r\n    if (user) return res.status(400).json({ message: \"User already exists\" });\r\n\r\n    user = new User({ name, email, password: await bcrypt.hash(password, 10) });\r\n    await user.save();\r\n\r\n    const token = jwt.sign({ id: user.id }, process.env.JWT_SECRET, {\r\n      expiresIn: \"1h\",\r\n    });\r\n    res.json({\r\n      token,\r\n      user: { id: user.id, name: user.name, email: user.email },\r\n    });\r\n  } catch (err) {\r\n    res.status(500).json({ error: err.message });\r\n  }\r\n};\r\n\r\n// Login user\r\nexports.loginUser = async (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  try {\r\n    const user = await User.findOne({ email });\r\n    if (!user) return res.status(400).json({ message: \"User not found\" });\r\n\r\n    const isMatch = await bcrypt.compare(password, user.password);\r\n    if (!isMatch)\r\n      return res.status(400).json({ message: \"Invalid credentials\" });\r\n\r\n    const token = jwt.sign({ id: user.id }, process.env.JWT_SECRET, {\r\n      expiresIn: \"1h\",\r\n    });\r\n    res.json({\r\n      token,\r\n      user: { id: user.id, name: user.name, email: user.email },\r\n    });\r\n  } catch (err) {\r\n    res.status(500).json({ error: err.message });\r\n  }\r\n};\r\n"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AACtC,MAAMC,MAAM,GAAGD,OAAO,CAAC,UAAU,CAAC;AAClC,MAAME,GAAG,GAAGF,OAAO,CAAC,cAAc,CAAC;;AAEnC;AACAG,OAAO,CAACC,YAAY,GAAG,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACzC,MAAM;IAAEC,IAAI;IAAEC,KAAK;IAAEC;EAAS,CAAC,GAAGJ,GAAG,CAACK,IAAI;EAE1C,IAAI;IACF,IAAIC,IAAI,GAAG,MAAMZ,IAAI,CAACa,OAAO,CAAC;MAAEJ;IAAM,CAAC,CAAC;IACxC,IAAIG,IAAI,EAAE,OAAOL,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAsB,CAAC,CAAC;IAEzEJ,IAAI,GAAG,IAAIZ,IAAI,CAAC;MAAEQ,IAAI;MAAEC,KAAK;MAAEC,QAAQ,EAAE,MAAMR,MAAM,CAACe,IAAI,CAACP,QAAQ,EAAE,EAAE;IAAE,CAAC,CAAC;IAC3E,MAAME,IAAI,CAACM,IAAI,CAAC,CAAC;IAEjB,MAAMC,KAAK,GAAGhB,GAAG,CAACiB,IAAI,CAAC;MAAEC,EAAE,EAAET,IAAI,CAACS;IAAG,CAAC,EAAEC,OAAO,CAACC,GAAG,CAACC,UAAU,EAAE;MAC9DC,SAAS,EAAE;IACb,CAAC,CAAC;IACFlB,GAAG,CAACQ,IAAI,CAAC;MACPI,KAAK;MACLP,IAAI,EAAE;QAAES,EAAE,EAAET,IAAI,CAACS,EAAE;QAAEb,IAAI,EAAEI,IAAI,CAACJ,IAAI;QAAEC,KAAK,EAAEG,IAAI,CAACH;MAAM;IAC1D,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOiB,GAAG,EAAE;IACZnB,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEY,KAAK,EAAED,GAAG,CAACV;IAAQ,CAAC,CAAC;EAC9C;AACF,CAAC;;AAED;AACAZ,OAAO,CAACwB,SAAS,GAAG,OAAOtB,GAAG,EAAEC,GAAG,KAAK;EACtC,MAAM;IAAEE,KAAK;IAAEC;EAAS,CAAC,GAAGJ,GAAG,CAACK,IAAI;EAEpC,IAAI;IACF,MAAMC,IAAI,GAAG,MAAMZ,IAAI,CAACa,OAAO,CAAC;MAAEJ;IAAM,CAAC,CAAC;IAC1C,IAAI,CAACG,IAAI,EAAE,OAAOL,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAiB,CAAC,CAAC;IAErE,MAAMa,OAAO,GAAG,MAAM3B,MAAM,CAAC4B,OAAO,CAACpB,QAAQ,EAAEE,IAAI,CAACF,QAAQ,CAAC;IAC7D,IAAI,CAACmB,OAAO,EACV,OAAOtB,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAsB,CAAC,CAAC;IAEjE,MAAMG,KAAK,GAAGhB,GAAG,CAACiB,IAAI,CAAC;MAAEC,EAAE,EAAET,IAAI,CAACS;IAAG,CAAC,EAAEC,OAAO,CAACC,GAAG,CAACC,UAAU,EAAE;MAC9DC,SAAS,EAAE;IACb,CAAC,CAAC;IACFlB,GAAG,CAACQ,IAAI,CAAC;MACPI,KAAK;MACLP,IAAI,EAAE;QAAES,EAAE,EAAET,IAAI,CAACS,EAAE;QAAEb,IAAI,EAAEI,IAAI,CAACJ,IAAI;QAAEC,KAAK,EAAEG,IAAI,CAACH;MAAM;IAC1D,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOiB,GAAG,EAAE;IACZnB,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEY,KAAK,EAAED,GAAG,CAACV;IAAQ,CAAC,CAAC;EAC9C;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}